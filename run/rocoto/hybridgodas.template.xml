<?xml version="1.0"?>
<!DOCTYPE workflow
[

<!-- experiment specific parameters -->
<!ENTITY EXP_DIR         "${EXP_DIR}">
<!ENTITY EXP_NAME        "${EXP_NAME}">
<!ENTITY MEM             "${MEM_LIST}">

<!-- fixed directory locations -->
<!ENTITY ROOT_DIR        "${ROOT_DIR}">
<!ENTITY WORK_DIR        "${WORK_DIR}">

<!-- forecast/da window lengths and timing-->
<!ENTITY CYCLE_LEN       "${CYCLE_LEN}">
<!ENTITY DA_WNDW_SLOTS   "${DA_WNDW_SLOTS}">


<!-- machine / scheduler specific parameters -->
<!ENTITY PPN                         "36">
<!ENTITY SCHED                       "moab">
<!ENTITY SCHED_ACCT                  "${SCHED_ACCT}">
<!ENTITY SCHED_S_ARGS                "-l partition=es">
<!ENTITY SCHED_S_QUEUE               "ldtn">
<!ENTITY SCHED_P_ARGS                "-l partition=c4">
<!ENTITY SCHED_P_QUEUE               "${SCHED_QUEUE}">

<!ENTITY fcst.prep_WALLTIME          "2:00">
<!ENTITY fcst.run_NODES              "20">
<!ENTITY fcst.run_SCHED_NATIVE       "&SCHED_P_ARGS; -l size=&fcst.run_NODES;">
<!ENTITY fcst.run_SCHED_QUEUE        "&SCHED_P_QUEUE;">
<!ENTITY fcst.run_WALLTIME           "15:00">
<!ENTITY fcst.cmb_WALLTIME           "2:00">
<!ENTITY da.obsop_WALLTIME           "2:00">
<!ENTITY da.3dvar.prep_WALLTIME      "2:00">
<!ENTITY da.3dvar.run_NODES          "2">
<!ENTITY da.3dvar.run_SCHED_NATIVE   "&SCHED_P_ARGS; -l size=&da.3dvar.run_NODES;">
<!ENTITY da.3dvar.run_WALLTIME       "10:00">
<!ENTITY da.update_WALLTIME          "2:00">


<!-- ============================================================ -->
<!-- "Shouldn't" need to edit anything below here -->
<!-- ============================================================ -->

<!-- rocoto parameters -->
<!ENTITY MAXTRIES        "10">

<!-- fixed directory locations -->
<!ENTITY SCRIPT_DIR      "&ROOT_DIR;/run/subscripts">

<!-- generated directory locations -->
<!ENTITY LOG_DIR         "&EXP_DIR;/log">
<!ENTITY LOG_PREFIX      "&LOG_DIR;/@Y/@Y@m@d@H/@Y@m@d@H">
<!ENTITY LOG_PREFIX_ENS  "&LOG_DIR;/@Y/@Y@m@d@H/mem_#mem#/@Y@m@d@H">
<!ENTITY FCST_DIR        "&WORK_DIR;/fcst_<cyclestr>@Y@m@d@H</cyclestr>/#mem#">

<!-- common environment blocks -->
<!ENTITY CYCLE           "<cyclestr>@Y@m@dZ@H</cyclestr>">
<!ENTITY ENV_COMMON "
  <envar>
    <name>ROOT_DIR</name>
    <value>&ROOT_DIR;</value>
  </envar>
  <envar>
    <name>WORK_DIR</name>
    <value>&WORK_DIR;</value>
  </envar>
  <envar>
    <name>EXP_DIR</name>
    <value>&EXP_DIR;</value>
  </envar>
  <envar>
    <name>CYCLE</name>
    <value>&CYCLE;</value>
  </envar>
  <envar>
    <name>CYCLE_LEN</name>
    <value>&CYCLE_LEN;</value>
  </envar>
">

<!ENTITY ENV_FCST "
  <envar>
    <name>FCST_DIR</name>
    <value>&FCST_DIR;</value>
  </envar>
  <envar>
    <name>RST_DIR</name>
    <value>&EXP_DIR;/fcst_rst/mem_#mem#/&#37;Y&#37;m&#37;d&#37;H</value>
  </envar>
">

<!ENTITY ENV_MEM "
 <envar>
  <name>ENS_MEM</name>
  <value>#mem#</value>
 </envar>
">

]>



<!-- ============================================================ -->
<!-- ============================================================ -->


<workflow realtime="F" scheduler="&SCHED;" cyclethrottle="2">

  <!-- TODO : need to be able to handle leap days -->
  <cycledef>${CYCLE_START}00  ${CYCLE_END}00 &CYCLE_LEN;:00:00</cycledef>

  <log verbosity="10"><cyclestr>&LOG_PREFIX;.workflow.log</cyclestr></log>


  <!--************************************************************-->
  <!-- Common forecast preparation-->
  <!--   (calculation of forcing perturbation mean) -->
  <!--************************************************************-->
  ${IF_LETKF_START}
  <task name="fcst.prep.common">
    <account>&SCHED_ACCT;</account>
    <native>&SCHED_S_ARGS;</native>
    <queue>&SCHED_S_QUEUE; </queue>
    <cores>1</cores>
    <walltime>1:00</walltime>
    <join><cyclestr>&LOG_PREFIX;.fcst.prep.common.log</cyclestr></join>
    <command></command>
  </task>
  ${IF_LETKF_END}



  <!--************************************************************-->
  <!-- ensemble forecast preparation-->
  <!--   (directory setup and ensemble member surface forcing) -->
  <!--************************************************************-->
  <metatask name="fcst.prep.all">
    <var name="mem">&MEM;</var>
    <task name="fcst.prep.#mem#" maxtries="&MAXTRIES;">

      <jobname>&EXP_NAME;.fcst.prep.#mem#</jobname>
      <command>&SCRIPT_DIR;/fcst.prep.sh</command>
      <join><cyclestr>&LOG_PREFIX_ENS;.fcst.prep.#mem#.log</cyclestr></join>       

      <account>&SCHED_ACCT;</account>
      <queue>&SCHED_S_QUEUE; </queue>
      <cores>1</cores>
      <native>&SCHED_S_ARGS;</native>
      <walltime>&fcst.prep_WALLTIME;</walltime>

      &ENV_COMMON;
      &ENV_MEM;
      &ENV_FCST;

    </task>
  </metatask>



  <!--************************************************************-->
  <!-- ensemble forecast run-->
  <!--************************************************************-->
  <metatask name="fcst.run.all">
    <var name="mem">&MEM;</var>
    <task name="fcst.run.#mem#" maxtries="&MAXTRIES;">

      <jobname>&EXP_NAME;.fcst.run.#mem#</jobname>
      <command>&SCRIPT_DIR;/fcst.run.sh</command>
      <join><cyclestr>&LOG_PREFIX_ENS;.fcst.run.#mem#.log</cyclestr></join>

      <account>&SCHED_ACCT;</account>
      <queue>&SCHED_P_QUEUE; </queue>
      <nodes>&fcst.run_NODES;:ppn=&PPN;</nodes>
      <native>&fcst.run_SCHED_NATIVE;</native>
      <walltime>&fcst.run_WALLTIME;</walltime>

      &ENV_COMMON;
      &ENV_MEM;
      &ENV_FCST;
      <envar>
	<name>NODES</name>
	<value>&fcst.run_NODES;</value>
      </envar>
      <envar>
	<name>PPN</name>
	<value>&PPN;</value>
      </envar>

      <dependency>
  	<and>
  	  <taskdep task="fcst.prep.#mem#"/>
	  <!-- must be the first date of a cycle, or
	       previous analysis must have finished -->
	  <rb>
	    <!--TODO, need to pick a format for time and stick with it (with or without the Z)-->
	    f = "&EXP_DIR;/cycle_status"
	    d=File.open(f,"r").gets.strip
	    d == ymdh || d == "&CYCLE;"
	  </rb>
  	</and>
      </dependency>

    </task>
  </metatask>



  <!--************************************************************-->
  <!-- ensemble forecast daily output combine -->
  <!--   - performs mppnccombine on daily output files as they are
           completed, and moves files to their destinations -->
  <!--************************************************************-->
  <metatask name="fcst.cmb.all">
    <var name="day">&DA_WNDW_SLOTS;</var>
    <metatask name="fcst.cmb.t#day#.allmem">
      <var name="mem">&MEM;</var>
      <task name="fcst.cmb.t#day#.#mem#" maxtries="&MAXTRIES;">

  	<jobname>&EXP_NAME;.fcst.combine.t#day#.#mem#</jobname>
  	<command>&SCRIPT_DIR;/fcst.combine.sh</command>
  	<join><cyclestr>&LOG_PREFIX_ENS;.fcst.combine.t#day#.#mem#.log</cyclestr></join>

  	<account>&SCHED_ACCT;</account>
  	<queue>&SCHED_S_QUEUE;</queue>
  	<cores>1</cores>
  	<native>&SCHED_S_ARGS;</native>
  	<walltime>&fcst.cmb_WALLTIME;</walltime>

  	&ENV_COMMON;
  	&ENV_MEM;
  	&ENV_FCST;
  	<envar>
  	  <name>DA_SLOT</name>
  	  <value>#day#</value>
  	</envar>
        <envar>
          <name>BKG_FILE</name>
	  <value>&EXP_DIR;/fcst_bkg/mem_#mem#/%Y%m%d.nc</value>
	</envar>

  	<dependency>
  	  <and>
  	    <!-- fcst.prep should have finished for this member -->
  	    <taskdep task="fcst.prep.#mem#"/>
  	    <!-- the forecast should have indicated it's started  -->
  	    <datadep>&FCST_DIR;/time_stamp.out</datadep>
  	    <!-- the fcst.combine script needs to check if all files are good and ready -->
  	    <sh>&SCRIPT_DIR;/fcst.combine.sh -check</sh>
  	  </and>
  	</dependency>

      </task>
    </metatask>
  </metatask>


  <!--************************************************************-->
  <!-- ensemble forecast daily output mean-->
  <!-- TODO, enable only if doing ensembles -->
  <!--************************************************************-->
  ${IF_HYBRID_START}
  <metatask name="fcst.cmb.alldays.mean">
    <var name="day">&DAYS;</var>
    <task name="fcst.cmb.t#day#.mean" maxtries="&MAXTRIES;">
      <account>&SCHED_ACCT;</account>
      <native>&SCHED_P_ARGS;</native>
      <queue>&SCHED_P_QUEUE;</queue>
      <cores>1</cores>
      <walltime>1:00</walltime>
      <join><cyclestr>&LOGPREFIX_ENSM;.fcst.cmb.t#day#.mean.log</cyclestr></join>
      <command>&ROOTDIR;/test.sh</command>
      <dependency>
  	<metataskdep metatask="fcst.cmb.t#day#.allmem"/>
      </dependency>
    </task>
  </metatask>
  ${IF_HYBRID_END}


  <!--************************************************************-->
  <!-- ensemble observation operators -->
  <!--************************************************************-->
  <metatask name="da.obsop.all">
    <var name="mem">&MEM;</var>
    <metatask name="da.obsop.#mem#.alldays">
      <var name="day">&DA_WNDW_SLOTS;</var>
      <task name="da.obsop.t#day#.#mem#" maxtries="&MAXTRIES;">

  	<jobname>&EXP_NAME;.da.obsop.t#day#.#mem#</jobname>
  	<command>&SCRIPT_DIR;/da.obsop.sh</command>
  	<join><cyclestr>&LOG_PREFIX_ENS;.da.obsop.t#day#.#mem#.log</cyclestr></join>

  	<account>&SCHED_ACCT;</account>
  	<queue>&SCHED_S_QUEUE;</queue>
  	<cores>1</cores>
  	<native>&SCHED_S_ARGS;</native>
  	<walltime>&da.obsop_WALLTIME;</walltime>

  	&ENV_COMMON;
  	&ENV_MEM;
  	&ENV_FCST;
  	<envar>
  	  <name>DA_SLOT</name>
  	  <value>#day#</value>
  	</envar>
        <envar>
          <name>BKG_FILE</name>
	  <value>&EXP_DIR;/fcst_bkg/mem_#mem#/%Y%m%d.nc</value>
	</envar>
	<envar>
	  <name>OBSOP_FILE</name>
	  <value>&EXP_DIR;/da_obsop/mem_#mem#/%Y%m%d.nc</value>
	</envar>

  	<dependency>
  	    <taskdep task="fcst.cmb.t#day#.#mem#"/>
  	</dependency>

      </task>
    </metatask>
  </metatask>



  <!--************************************************************-->
  <!-- 3dvar prep -->
  <!--************************************************************-->
  <!-- TODO : should actually depend on obsop of ensemble background mean, or ensemble ana mean -->
  ${IF_3DVAR_START}
  <task name="da.3dvar.prep" maxtries="&MAXTRIES;">
    <jobname>&EXP_NAME;.da.3dvar.prep</jobname>
    <command>&SCRIPT_DIR;/da.3dvar.prep.sh</command>
    <join><cyclestr>&LOG_PREFIX;.da.3dvar.prep.log</cyclestr></join>
    
    <account>&SCHED_ACCT;</account>
    <queue>&SCHED_S_QUEUE;</queue>
    <cores>1</cores>
    <native>&SCHED_S_ARGS;</native>
    <walltime>&da.3dvar.prep_WALLTIME;</walltime>

    &ENV_COMMON;
    <envar>
      <name>DA_WNDW_SLOTS</name>
      <value>&DA_WNDW_SLOTS;</value>
    </envar>
    <envar>
      <name>OBSOP_FILE</name>
      <value>&EXP_DIR;/da_obsop/mem_0001/%Y%m%d.nc</value>
    </envar>
    <envar>
      <name>OBSOP_CMB_FILE</name>
      <value>&EXP_DIR;/da_obsop_cmb/mem_0001/<cyclestr>@Y@m@d</cyclestr>.nc</value>
    </envar>

    <dependency>
      <metataskdep metatask="da.obsop.all"/>
    </dependency>
  </task>
  ${IF_3DVAR_END}


  <!--************************************************************-->
  <!-- 3dvar -->
  <!--************************************************************-->
  <!-- TODO - use ens mean for bkg -->
  <!-- and <metataskdep metatask="da.obsop.mean.alldays"/> -->
  ${IF_3DVAR_START}
  <task name="da.3dvar" maxtries="&MAXTRIES;">

    <jobname>&EXP_NAME;.da.3dvar.run</jobname>
    <command>&SCRIPT_DIR;/da.3dvar.run.sh</command>
    <join><cyclestr>&LOG_PREFIX;.da.3dvar.run.log</cyclestr></join>

    <account>&SCHED_ACCT;</account>
    <queue>&SCHED_P_QUEUE; </queue>
    <nodes>&da.3dvar.run_NODES;:ppn=&PPN;</nodes>
    <native>&da.3dvar.run_SCHED_NATIVE;</native>
    <walltime>&da.3dvar.run_WALLTIME;</walltime>

    &ENV_COMMON;
    <envar>
      <name>NODES</name>
      <value>&da.3dvar.run_NODES;</value>
    </envar>
    <envar>
      <name>PPN</name>
      <value>&PPN;</value>
    </envar>
    <envar>
      <name>BKG_FILE</name>
      <value>&EXP_DIR;/fcst_bkg/mem_0001/%Y%m%d.nc</value>
    </envar>
    
    <dependency>
      <taskdep task="da.3dvar.prep"/>
    </dependency>

  </task>
  ${IF_3DVAR_END}



  <!--************************************************************-->
  <!-- letkf -->
  <!--************************************************************-->
  ${IF_LETKF_START}
  <task name="da.letkf" maxtries="&MAXTRIES;">
    <account>&SCHED_ACCT;</account>
    <native>&SCHED_S_ARGS;</native>
    <queue>&SCHED_S_QUEUE;</queue>
    <cores>1</cores>
    <walltime>1:00</walltime>
    <join><cyclestr>&LOG_PREFIX;.da.letkf.log</cyclestr></join>
    <command>&ROOT_DIR;/da.letkf.sh</command>
    <dependency>
      <taskdep task="da.obsop.all.hold"/>
    </dependency>
  </task>
  ${IF_LETKF_END}

  

  <!--************************************************************-->
  <!-- letkf/3dvar combine and restart file update-->
  <!--************************************************************-->
  <task name="da.update" maxtries="&MAXTRIES;">
    <jobname>&EXP_NAME;.da.update</jobname>
    <command>&SCRIPT_DIR;/da.update.sh</command>
    <join><cyclestr>&LOG_PREFIX;.da.update.log</cyclestr></join>
    
    <account>&SCHED_ACCT;</account>
    <queue>&SCHED_P_QUEUE;</queue>
    <nodes>1:ppn=&PPN;</nodes>
    <native>-l partition=c4 -l size=1</native>
    <walltime>&da.update_WALLTIME;</walltime>

    &ENV_COMMON;
    <envar>
      <name>NPROC</name>
      <value>&PPN;</value>
    </envar>

    <dependency>
      <and>
  	${IF_3DVAR_START} <taskdep task="da.3dvar"/>     ${IF_3DVAR_END}
	${IF_LETKF_START} <taskdep task="da.letkf.run"/> ${IF_LETKF_END}
      </and>
    </dependency>
  </task>


  <!--************************************************************-->
  <!-- any other post processing -->
  <!--************************************************************-->
  <!-- <task name="da.postproc" maxtries="&MAXTRIES;"> -->
  <!--   <jobname>&EXP_NAME;.da.postproc</jobname> -->
  <!--   <command>&SCRIPT_DIR;/da.postproc.sh</command> -->
  <!--   <join><cyclestr>&LOG_PREFIX;.da.postproc.log</cyclestr></join> -->
    
  <!--   <account>&SCHED_ACCT;</account> -->
  <!--   <queue>&SCHED_S_QUEUE;</queue> -->
  <!--   <cores>1</cores> -->
  <!--   <native>&SCHED_S_ARGS;</native> -->
  <!--   <walltime>5:00</walltime> -->

  <!--   &ENV_COMMON; -->

  <!--   <dependency> -->
  <!--     <taskdep task="da.update.hold"/> -->
  <!--   </dependency> -->

  <!-- </task> -->

</workflow>
